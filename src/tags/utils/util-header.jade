util-header
  div.wrap-util
    div(if="{status == 'normal'}").container.f.flex-between
      a.wrap-img.f.fh
        img(src='{iconSrc}')
      a(onclick='{toPost}').wrap-img.f.fh
        img(src='{postSrc}')

    div(if="{status == 'create_post'}").container.f.flex-between
      a(onclick='{toBack}').wrap-img.f.fh
        img(src='{backSrc}')
      a(onclick='{sendPost}').wrap-img.f.fh
        p.cta.mr12#postButton Share

    div(if="{status == 'back'}").container.f.flex-between
      a(onclick='{toBack}').wrap-img.f.fh
        img(src='{backSrc}')


  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      position: fixed;
      z-index: 101;
      top: 0;
      left: 0;
      width: 100%;
      height: 48px;
      border-bottom: solid 0.6px rgba(0,0,0,0.2);
      background: @secondaryBg;
      /*filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.6));*/
      .wrap-util {
        width: 100%;
        height: 100%;
        .container {
          height: 100%;
          .wrap-img {
            width: 48px;
            height: 100%;
            img {
              width: 32px;
              border-radius: 50%;
            }
          }
          .cta {
            color: @primaryGray;
            font-weight: bold;
            pointer-events: none;
          }
          .cta-active {
            color: @ctaColor;
            pointer-events: auto;
          }
        }
      }
    }

  script.

    this.status = opts.status;

    this.on('mount', function(){
      if('user' in session){

        // normal
        this.postSrc = './img/icon/post.svg';
        this.iconSrc = session.user.imgUrl;
        this.toPost = function(){
          window.location.href = './#create-post';
        }
        
        // create_post
        this.backSrc = './img/icon/back.svg';
        this.sendPost = function() {
          var textarea = document.getElementById('postInput');
          var value = textarea.value;
          console.log(value);
          if(value=='') return;

          var postObj = {
            author: session.user.uid,
            postedAs: session.user.currentUser,
            text: value,
            imgUrls: [],
            favedBy: [],
            sharedBy: [],
            createdAt: new Date()
          };
          
          $('util-now-loading').fadeIn(400);
          service.db.collection("posts").add(postObj)
            .then(function(docRef) {
              console.log("Document written with ID: ", docRef.id);
              window.history.back();
              riot.mount('header', 'util-header', {status: 'normal'});
              $('util-now-loading').fadeOut(400);
            })
            .catch(function(error) {
              console.error("Error adding document: ", error);
              alert('Failed to Post');
            });

        }

        this.toBack = function() {
          window.history.back();
        }

      } // if('user' in session)
    });
    

    /*
    switch (opts.status){
      case 'normal':
        this.leftIconSrc = '';
        this.rightIconSrc = '';
      break;

      case 'modal':

      break;
    }
    */