page-post
  div.wrap-page
    div.wrap-post
      post-card
    p.comment-h.px12.py6 Comments
    div.wrap-comments
      div.wrap-no-comments
        div.f.fh
          p No Comments
      div.wrap-loading-comment
        div.wrap-loading.f.fh
          atom-now-loading-icon
      module-comment-card(each='{item in comments}' content='{item}')

  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-page {
        width: 100%;
        height: 100%;
        background: @primaryBg;
        .comment-h {
          border-bottom: solid .6px rgba(0,0,0,0.2);
        }
        .wrap-comments {
          position: relative;
          .wrap-loading-comment {
            display: none;
            width: 100%;
            height: 100%;
            /*height: ~"calc(100vh - 230px)";*/
            top: 0;
            left: 0;
            position: absolute;
            background: #FFF;
            .wrap-loading {
              width: 100%;
              height: 200px;
              /*height: 100%;*/
            }
          }
          .wrap-no-comments {
            display: none;
            width: 100%;
            height: 200px;
            top: 0;
            left: 0;
            position: absolute;
            background: #FFF;
            div {
              width: 100%;
              height: 100%;
              p {
                text-align: center;
              }
            }
          }
        }
      }
    }

  script.
    
    var self = this;
    this.postContent;


    this.on('mount', function(){

      if(location.hash != '#mypage'){
        $('modal-content').addClass('show');
        $('modal-content').scrollTop(0);

        // 次の画面遷移時にフェードインを防止
        riot.enableFadeIn = false;

        $(document).on("custom:close", function() {
          $('modal-content').removeClass('show');
          self.unmount(true);
        });

        riot.enableReloadContent = false;
      }
      
    });

    
    var postId = opts.postid;

    // PostをdocIdから取得
    service.db.collection("posts").doc(postId).onSnapshot(doc =>{    
      var data = doc.data();
      var post = {
        postId: doc.id,
        iconSrc: data.postedAs.imgUrl,
        authorId: data.author,
        name: data.postedAs.name,
        uid: data.postedAs.uid,
        text: data.text.split('\n'),
        time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
      };
      
      //self.postContent = post;

      riot.mount('post-card', 'module-post-card', {content: post});
      riot.update();

      $('.wrap-loading-comment').show();
    })


    // 紐づいたコメントを取得
    service.db.collection("comments")
      .orderBy("createdAt", 'asc')
      .where("to", "==", postId)
      .get().then(function(querySnapshot) {
        var comments = [];
        querySnapshot.forEach(function(doc) {
          if(doc.id){
            var data = doc.data();
            var comment = {
              postId: data.postId,
              iconSrc: data.postedAs.imgUrl,
              authorId: data.author,
              name: data.postedAs.name,
              uid: data.postedAs.uid,
              text: data.text.split('\n'),
              time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
            };
            comments.push(comment);
          }
          $('#loading').fadeOut(400);
        });

        self.comments = comments;
        riot.update();

        if(comments[0] == undefined) $('.wrap-no-comments').show();
        $('.wrap-loading-comment').delay(400).fadeOut(400);
    });


    
    