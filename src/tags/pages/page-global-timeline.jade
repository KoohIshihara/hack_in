page-global-timeline
  div.wrap-page#wrapTimeline
    div(each='{item in posts}')
      module-post-card(content='{item}')
    div.wrap-loading-more
      div.f.fh
        atom-now-loading-icon

  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-page {
        width: 100%;
        background: @primaryBg;
        overflow: scroll;
        .wrap-loading-more {
          display: none;
        }
      }
    }

  script.

    var self = this;

    this.posts = [];
    this.loadedAt = new Date();
    this.enableLoading = true;
    this.isLoading = false;

    this.on('mount', function(){
      // Load More
      //var timeline = document.getElementById("wrapTimeline")
      var content = document.getElementsByTagName("content")[0];
      content.onscroll = function(e){
        if(window.location.hash=='#global-timeline'){
          var scrollValue = this.scrollTop;
          var scrollHeight = this.scrollHeight;
          var offsetHeight = this.offsetHeight;
          if(scrollValue - (scrollHeight-offsetHeight) == 0){
            console.log("more");
            loadPosts(7, self.loadedAt);
          }
        }
      }
      
    });

    riot.mount('header', 'util-header', {status: 'normal'});
    riot.update();

    

    // 投稿のデータを取得
    var loadPosts = function(limitNum, when){
      if(self.enableLoading && !(self.isLoading)){
        self.isLoading = true;
        $('.wrap-loading-more').slideDown(400);

        service.db.collection("posts")
          .orderBy("createdAt", 'desc')
          //.startAt(startAt)
          .where("createdAt", "<", when)
          .limit(limitNum)
          .get().then(function(querySnapshot) {
            var posts = [];
            querySnapshot.forEach(function(doc) {
              if(doc.id){
                var data = doc.data();
                var post = {
                  postId: doc.id,
                  iconSrc: data.postedAs.imgUrl,
                  authorId: data.author,
                  name: data.postedAs.name,
                  uid: data.postedAs.uid,
                  text: data.text.split('\n'),
                  time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
                };
                posts.push(post);
                self.loadedAt = data.createdAt;
              }
              $('#loading').fadeOut(400);
            });
            self.posts = self.posts.concat(posts);
            riot.update();

            $('.wrap-loading-more').slideUp(400);

            // 読み込める投稿がなくなったら
            console.log('posts', posts);
            self.isLoading = false;
            if(posts[0]==undefined) self.enableLoading = false;
        });
      } // if(self.enableLoading)
    }

    if(session.user){ 
      $('#loading').fadeIn(400);
      loadPosts(14, this.loadedAt);
    }

    // サインアップ時の処理
    async function postNewUser(){
      
      var user = session.userFireauth;

      var userObj = {
        name: user.displayName,
        uid: user.uid,
        author: user.uid,
        auth_token: session.token,
        profileHistory: ['No Profile'],
        email: user.email,
        imgUrl: user.photoURL + '?width=420&amp;height=420',
        hackedCounter: 0,
        follow: [],
        follower: [],
        //hackedUid: user.uid,
        currentUser: {
          name: user.displayName,
          uid: user.uid,
          profile: '',
          imgUrl: user.photoURL + '?width=892&amp;height=892',
        },
      };

      session.user = userObj;

      await service.db.collection("users").add(userObj)
        .then(function(docRef) {
          console.log("Document written with ID: ", docRef.id);
        })
        .catch(function(error) {
          console.error("Error adding document: ", error);
          alert('Failed to Sign Up');
          logout();
        });

      var postObj = {
        author: session.user.uid,
        postedAs: session.user.currentUser,
        text: `${userObj.name} has started Hack In.`,
        imgUrls: [],
        favedBy: [],
        sharedBy: [],
        createdAt: new Date()
      };

      service.db.collection("posts").add(postObj)
        .then(function(docRef) {
          console.log("Document written with ID: ", docRef.id);
        })
        .catch(function(error) {
          console.error("Error adding document: ", error);
          alert('Failed to Post');
        });
      

      $('#loading').fadeIn(400);
      riot.mount('header', 'util-header', {status: 'normal'});
      //riot.mount('content', 'page-global-timeline');

      riot.update();
      
    }
    

    if(session.isNewUser){
      postNewUser();
      session.isNewUser = false;
    }


  

