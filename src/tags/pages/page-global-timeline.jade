page-global-timeline
  div.wrap-page
    module-post-card(each='{item in posts}' content='{item}')
    //module-post-card(content='{postContent}')

  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-page {
        padding: 48px 0px;
        width: 100%;
        height: 100%;
        background: @primaryBg;
      }
    }

  script.

    var self = this;

    this.on('mount', function(){
      $('util-now-loading').fadeOut(400);
    });


    // 投稿のデータを取得
    var loadPosts = function(limitNum){
      service.db.collection("posts")
        .orderBy("createdAt", 'desc')
        .limit(limitNum).get().then(function(querySnapshot) {
        var posts = [];
        querySnapshot.forEach(function(doc) {
          if(doc.id){
            var data = doc.data();
            var post = {
              iconSrc: data.postedAs.imgUrl,
              name: data.postedAs.name,
              uid: data.postedAs.uid,
              text: data.text.split('\n'),
              time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
            };
            posts.push(post);
          }
        });
        
        self.posts = posts;
        console.log(posts);
        /*
        var post = posts[0];
        self.postContent = {
          iconSrc: post.postedAs.imgUrl,
          name: post.postedAs.name,
          uid: post.postedAs.uid,
          text: post.text,
          time: moment(post.createdAt).format('ddd DD, YYYY, HH:mm'),
        }
        */
        riot.update();
      });
    }

    loadPosts(100);

    

    // サインアップ時の処理
    async function postNewUser(){
      
      var user = session.userFireauth;

      var userObj = {
        name: user.displayName,
        uid: user.uid,
        author: user.uid,
        auth_token: session.token,
        profile: '',
        email: user.email,
        imgUrl: user.photoURL + '?width=892&amp;height=892',
        //hackedUid: user.uid,
        currentUser: {
          name: user.displayName,
          uid: user.uid,
          profile: '',
          imgUrl: user.photoURL + '?width=892&amp;height=892',
        },
      };

      session.user = userObj;

      await service.db.collection("users").add(userObj)
        .then(function(docRef) {
          console.log("Document written with ID: ", docRef.id);
        })
        .catch(function(error) {
          console.error("Error adding document: ", error);
          alert('Failed to Sign Up');
          logout();
        });

      riot.mount('header', 'util-header', {status: 'normal'});
      riot.mount('content', 'page-global-timeline');
      riot.update();
      
    }
    
    if(session.isNewUser){
      postNewUser();
      session.isNewUser = false;
    }

