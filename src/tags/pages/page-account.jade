page-account
  div.wrap-page
    item-profile-icon(uid='{uid}')
    div.tab.f.flex-around
      // ここに .active つけるとタブわけになるよ
      p(onclick='{changeTab.bind(this, "post")}').tab-button.py4.active Posts
      p(onclick='{changeTab.bind(this, "comment")}').tab-button.py4 Comments
    div.wrap-posts.wrap-tab
      module-post-card(each='{item in posts}' content='{item}')
      div.wrap-loading-more-account
        div.f.fh
          atom-now-loading-icon
    div.wrap-comments.wrap-tab
      module-comment-card(each='{item in comments}' content='{item}')
  atom-notification-hack



  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-page {
        width: 100%;
        height: 100%;
        background: @primaryBg;
        .tab {
          position: relative;
          p {
            width: 100%;
            text-align: center;
            border-bottom: solid 0.8px;
            color: @primaryGray;
          }
          .active {
            border-bottom: solid 2px;
            color: @primaryBlack !important;
            font-weight: bold;
          }
        }
        .wrap-posts {
          margin-bottom: 48px;
          .wrap-loading-more-account {
            display: none;
          }
        }
      }
    }

  script.
    
    var self = this;

    this.posts = [];
    this.loadedAt = new Date();
    this.enableLoading = true;
    this.isLoading = false;

    this.comments = [];

    this.currentTabType = "post";

    this.on('mount', function(){

      if(location.hash != '#mypage'){
        $('modal-content').addClass('show');
        $('modal-content').scrollTop(0);

        // 次の画面遷移時にフェードインを防止
        riot.enableFadeIn = false;

        $(document).on("custom:close", function() {
          $('modal-content').removeClass('show');
          self.unmount(true);
        });

        riot.enableReloadContent = false;
      }
      
      var content
      if(window.location.hash.indexOf('#users') == 0){
        content = document.getElementsByTagName("modal-content")[0];
      }else if(window.location.hash=='#mypage'){
        content = document.getElementsByTagName("content")[0];
      }

      content.onscroll = function(e){
        //if(window.location.hash=='#global-timeline'){
          var scrollValue = this.scrollTop;
          var scrollHeight = this.scrollHeight;
          var offsetHeight = this.offsetHeight;
          if(scrollValue - (scrollHeight-offsetHeight) == 0){
            console.log("more");
            if(this.currentTabType=="post"){
              self.loadPosts(7, self.loadedAt);
            }else if(this.currentTabType=="comment"){
              // TO DO: scroll 最下部でmore loadingをして更新できるようにする
            }
          }
        //}
      }
    });

    this.uid = opts.__proto__.uid;

    this.changeTab = function(tab_type, e) {
      
      if(e.target.classList.contains('active')) return;

      var tabs = document.getElementsByClassName('tab-button');

      for(var i=0; i<tabs.length; i++){
        tabs[i].classList.remove('active');
      }
      e.target.classList.add('active');

      // TO DO: Get Data by tab here
      switch(tab_type) {
        case 'post':
          $('.wrap-tab').hide();
          $('.wrap-posts').show();
          this.loadedAt = new Date();
          this.loadPosts(14, this.loadedAt);
        break;
        case 'comment':
          $('.wrap-tab').hide();
          $('.wrap-comments').show();
          this.loadedAt = new Date();
          this.loadComments(14, this.loadedAt);
        break;
      }

      this.currentTabType = tab_type;

    }

    this.loadPosts = function(limitNum, when) {
      if(self.enableLoading && !(self.isLoading)){
        self.isLoading = true;
        $('.wrap-loading-more-account').slideDown(400);

        service.db.collection("posts")
          .where("postedAs.uid", "==", this.uid)
          .orderBy("createdAt", 'desc')
          .where("createdAt", "<", when)
          .limit(limitNum).get().then(function(querySnapshot) {
            
            var posts = [];
            querySnapshot.forEach(function(doc) {
              if(doc.id){
                var docId = doc.id;
                var data = doc.data();
                var post = {
                  postId: doc.id,
                  iconSrc: data.postedAs.imgUrl,
                  authorId: data.author,
                  name: data.postedAs.name,
                  uid: data.postedAs.uid,
                  text: data.text.split('\n'),
                  time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
                  docId: docId,
                };
                posts.push(post);
                self.loadedAt = data.createdAt;
              }
            });

            self.posts = self.posts.concat(posts);
            riot.update();

            $('.wrap-loading-more-account').slideUp(400);
            self.isLoading = false;
            if(posts[0]==undefined) self.enableLoading = false;

            if(location.hash == '#mypage'){
              $('#loading').fadeOut(400);
            }else{
              $('#loadingForModal').fadeOut(400);
            }
        });
      } // if(self.enableLoading)
    }

    // TO DO: scroll 最下部でコメントタブもmore loadingをして更新できるようにする
    this.loadComments = function() {
      service.db.collection("comments")
        .where("postedAs.uid", "==", this.uid)
        .orderBy("createdAt", 'desc')
        .limit(30)
        .get().then(function(querySnapshot) {
          var comments = [];
          querySnapshot.forEach(function(doc) {
            if(doc.id){
              var data = doc.data();
              var comment = {
                postId: data.postId,
                iconSrc: data.postedAs.imgUrl,
                authorId: data.author,
                name: data.postedAs.name,
                uid: data.postedAs.uid,
                text: data.text.split('\n'),
                time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
              };
              comments.push(comment);
            }
            $('#loading').fadeOut(400);
          });

        self.comments = comments;
        riot.update();
      });
    }

    if(location.hash == '#mypage'){
      $('#loading').fadeIn(400);
    }else{
      $('#loadingForModal').fadeIn(400);
    }
    
    this.loadPosts(14, this.loadedAt);



