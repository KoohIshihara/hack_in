page-account
  div.wrap-page
    item-profile-icon(uid='{uid}')
    div.tab.f.flex-around
      p(onclick='{changeTab.bind(this, "post")}').tab-button.active.py4 Posts
      //p(onclick='{changeTab.bind(this, "fav")}').tab-button.py4 Favorite
    div.wrap-posts
      module-post-card(each='{item in posts}' content='{item}')




  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-page {
        width: 100%;
        height: 100%;
        background: @primaryBg;
        .tab {
          p {
            width: 100%;
            text-align: center;
            color: @primaryBlack;
          }
          .active {
            border-bottom: solid 0.8px;
            color: @ctaColor !important;
            font-weight: 500;
          }
        }
        .wrap-posts {
          margin-bottom: 48px;
        }
      }
    }

  script.
    
    var self = this;

    this.on('mount', function(){

      if(location.hash != '#mypage'){
        $('modal-content').addClass('show');
        $('modal-content').scrollTop(0);

        // 次の画面遷移時にフェードインを防止
        riot.enableFadeIn = false;

        $(document).on("custom:close", function() {
          $('modal-content').removeClass('show');
          self.unmount(true);
        });

        riot.enableReloadContent = false;
      }
    });

    this.uid = opts.__proto__.uid;

    this.changeTab = function(tab_type, e) {
      
      if(e.target.classList.contains('active')) return;

      var tabs = document.getElementsByClassName('tab-button');

      for(var i=0; i<tabs.length; i++){
        tabs[i].classList.remove('active');
      }
      e.target.classList.add('active');

      // TO DO: Get Data by tab here
      switch(tab_type) {
        case 'post':
          this.getAllPosts(14);
        break;
        case 'fav':

        break;
      }

    }

    this.getAllPosts = function(limitNum) {
      service.db.collection("posts")
        .where("postedAs.uid", "==", this.uid)
        .orderBy("createdAt", 'desc')
        .limit(limitNum).get().then(function(querySnapshot) {
          
          var posts = [];
          querySnapshot.forEach(function(doc) {
            if(doc.id){
              var docId = doc.id;
              var data = doc.data();
              var post = {
                iconSrc: data.postedAs.imgUrl,
                name: data.postedAs.name,
                uid: data.postedAs.uid,
                text: data.text.split('\n'),
                time: moment(data.createdAt).format('ddd DD, YYYY, HH:mm'),
                docId: docId,
              };
              posts.push(post);
            }
          });

          self.posts = posts;
          riot.update();

          if(location.hash == '#mypage'){
            $('#loading').fadeOut(400);
          }else{
            $('#loadingForModal').fadeOut(400);
          }
      });
    }

    if(location.hash == '#mypage'){
      $('#loading').fadeIn(400);
    }else{
      $('#loadingForModal').fadeIn(400);
    }
    
    this.getAllPosts(100);



