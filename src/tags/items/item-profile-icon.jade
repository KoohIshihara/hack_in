item-profile-icon(data-doc-id='{docId}')
  div.wrap-item.py20
    div.wrap-icon.f.fh
      div.wrap-icon-content
        div.f.fc.m16
          div.wrap-img
            img(src='{iconSrc}').mb8
        p.name.mb16 {this.name}
        div.mb16.f.fc
          div.wrap-buttons.f.flex-around
            div.f.fc
              atom-hack-in(uid='{uid}')
            div(if='{showFollow}').f.fc
              atom-follow-button(uid='{uid}')
        div.mb16.f.fc
          div.wrap-follow-follower.f.flex-around
            atom-how-many-follow(uid='{uid}')
        //p.profile.mb20 {this.profile}
        div.mb16.f.fc.flex-wrap.flex-column.flex-middle
          div.wrap-profile
            atom-profile(uid='{uid}')
          div.wrap-create-profile-button
            atom-create-profile-button(uid='{uid}')


  style(scoped, type='less').
    @import "public/stylesheets/main.less";
    @import "public/stylesheets/theme.less";
    :scope {
      .wrap-item {
        width: 100%;
        background: @primaryBg;
        .wrap-icon {
          width: 100%;
          .wrap-icon-content {
            width: 80%;
            max-width: 300px;
            .wrap-img {
              width: 120px;
              height: 120px;
              overflow: hidden;
              border-radius: 50%;
              img {
                height: 100%;
                object-fit: cover;
              }
            }
            .name {
              text-align: center;
              font-weight: bold;
              letter-spacing: 1px;
            }
            .profile {
              text-align: center;
              letter-spacing: 1px;
            }
            .wrap-buttons {
              width: 240px;
            }
            .wrap-follow-follower {
              width: 240px;
            }
            .wrap-create-profile-button {
              display: none;
            }
          }/* .wrap-icon-content */
        }
      }
    }

  script.
    
    var self = this;

    this.showFollow = true;

    // console.log('opts.uid', opts.uid);

    var uid = opts.uid;
    this.uid = uid;

    if(uid){
      service.db.collection("users")
        .where("uid", "==", uid)
        .limit(1)
        .get()
        .then(function(querySnapshot) {
          querySnapshot.forEach(function(doc) {
            //console.log(doc.uid, " => ", doc.data());
            var user;
            if(doc.data().uid == uid){ 
              user = doc.data();
              self.iconSrc = user.imgUrl;
              self.name = user.name;
              self.profile = user.profileHistory[user.profileHistory.length-1];
              self.update();
            }
          });

      }).catch(function(error) {
        console.log("Error getting documents: ", error);
      });

      // create profileを見せるかどうか
      //this.showCreateProfile = false;
      //if(session.user.currentUser.uid == uid) this.showCreateProfile = true;
    } // if(uid)

    // 自分のページだったらフォローボタンは消す
    if(session.user && opts.uid == session.user.uid){
      this.showFollow = false;
      this.update();
    }



    this.on('mount', function(){

      if(session.user && session.user.currentUser.uid == self.uid){
        $('.wrap-create-profile-button').show();
      }

    });
    






